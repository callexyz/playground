global !p

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def env(name):
	[x, y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

def create_row_tabstops(count, start=0):
	return ' & '.join([f"${i + 1}" for i in range(start, start + count)])

def expand_row(snip, row):
	snip.expand_anon(row)

def create_matrix_tabstops(rows, cols):
	res = ""
	eol = "\\\\\\\\\n"
	for i in range(rows):
		res += f"{create_row_tabstops(cols, i * cols)} {eol}"
	return res.rstrip()

def expand_matrix(snip, rows, cols):
	snip.expand_anon(create_matrix_tabstops(rows, cols))

def dynamic_space(snip):
	snip.rv = ' ' if t[2] and t[2][0] not in [",", ".", "?", "-", " "] else ''

endglobal

priority 0

snippet be "begin / end" b
\begin{${1:${VISUAL}}}
	$0
\end{$1}
endsnippet

snippet cnt "center" "not math()" eb
\begin{center}
	$0
\end{center}
endsnippet

snippet mk "inline math" "not math()" Aew
\( $1 \)`!p dynamic_space(snip)`$2
endsnippet

priority 10
snippet mk "inline math" "not math()" Aeb
\(
	$1
\)
$0
endsnippet
priority 0

snippet dm "display math" "not math()" Aeb
\[
	$0
\]
endsnippet

snippet eq "equation" "not math()" eb
\begin{equation}
	$0
\end{equation}
endsnippet

snippet ls "itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet en "enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet it "item" "env('itemize') or env('enumerate')" eb
`!p vim.eval(r'feedkeys("\<c-f>")')` \item $0
endsnippet

snippet ti "italics" "not math()" ew
\textit{${1:${VISUAL}}}`!p dynamic_space(snip)`$2
endsnippet

snippet bf "bold" "not math()" ew
\textbf{${1:${VISUAL}}}`!p dynamic_space(snip)`$2
endsnippet

snippet tt "typewriter" "not math()" ew
\texttt{${1:${VISUAL}}}`!p dynamic_space(snip)`$2
endsnippet

snippet tt "text" "math()" ew
\text{${1:${VISUAL}}}`!p dynamic_space(snip)`$2
endsnippet

snippet chap "chapter" "not math()" eb
\chapter{${1:${VISUAL}}}
$0
endsnippet

snippet sec "section" "not math()" eb
\section{${1:${VISUAL}}}
$0
endsnippet

snippet sub "subsection" "not math()" eb
\subsection{${1:${VISUAL}}}
$0
endsnippet

snippet ssub "subsubsection" "not math()" eb
\subsubsection{${1:${VISUAL}}}
$0
endsnippet

snippet la "label" w
\label{${1:type}:${2:name}}
endsnippet

snippet >= "geq" "math()" Aew
\geq
endsnippet

snippet <= "leq" "math()" Aew
\leq
endsnippet

snippet << "ll" "math()" Aew
\ll
endsnippet

snippet >> "gg" "math()" Aew
\gg
endsnippet

snippet != "neq" "math()" Aew
\neq
endsnippet

snippet === "neq" "math()" Aew
\equiv
endsnippet

snippet pm "plus minus" "math()" Aew
\pm
endsnippet

snippet mp "minus plus" "math()" Aew
\mp
endsnippet

snippet => "implies" "math()" ew
\implies
endsnippet

snippet =< "implied by" "math()" ew
\impliedby
endsnippet

snippet :: "colon" "math()" Aew
\colon
endsnippet

snippet iff "iff" "math()" ew
\iff
endsnippet

snippet "([a-zA-Z])bar" "bar" "math()" er
\bar{`!p snip.rv = match.group(1)`}
endsnippet

snippet bar "bar" "math()" e
\bar{$1}
endsnippet

snippet "([a-zA-Z])hat" "hat" "math()" er
\hat{`!p snip.rv = match.group(1)`}
endsnippet

snippet hat "hat" "math()" e
\hat{$1}
endsnippet

snippet "([a-zA-Z])cal" "cal" "math()" er
\mathcal{`!p snip.rv = match.group(1).upper()`}
endsnippet

snippet cal "cal" "math()" e
\cal{$1}
endsnippet

snippet "([a-zA-Z])vec" "vec" "math()" er
\vec{`!p snip.rv = match.group(1)`}
endsnippet

snippet vec "vec" "math()" e
\vec{$1}
endsnippet

snippet "([a-zA-Z])dot" "vec" "math()" er
\dot{`!p snip.rv = match.group(1)`}
endsnippet

snippet dot "dot" "math()" e
\dot{$1}
endsnippet

priority 10
snippet "([a-zA-Z])ddot" "vec" "math()" er
\dot{`!p snip.rv = match.group(1)`}
endsnippet

snippet ddot "dot" "math()" e
\dot{$1}
endsnippet
priority 0

snippet "([a-zA-Z])til" "tilde" "math()" er
\tilde{`!p snip.rv = match.group(1)`}
endsnippet

snippet til "tilde" "math()" e
\tilde{$1}
endsnippet

snippet "(?<!\\)\bsim" "sim" "math()" Aer
\sim
endsnippet

snippet -- "sim" "math()" ew
\sim
endsnippet

snippet ^^^ "ceil" "math()" ew
\left\lceil $1	\right\rceil
endsnippet

snippet ___ "floor" "math()" ew
\left\lfloor $1	\right\rfloor
endsnippet

snippet <> "angle brackets" "math()" ew
\left\langle $1	\right\rangle
endsnippet

snippet // "simple fraction" "math()" Aei
\frac{$1}{$2}
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "fraction" "math()" Aewr
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 10
snippet '^.*\)/' "dynamic fraction" "math()" Aewr
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet
priority 0

snippet qq "quad" "math()" ew
\quad
endsnippet

priority 10
snippet qqq "quad" "math()" ew
\qquad
endsnippet
priority 0

snippet def= "equals by def" "math()" ew
\overset{\textsf{\tiny ${1:def}}}{${2:=}}
endsnippet

snippet tr= "triangleq" "math()" ew
\triangleq
endsnippet

snippet := "coloneq" "math()" Aew
\coloneq
endsnippet

snippet .= "dot equal" "math()" ew
\dot{=}
endsnippet

snippet \sim= "simeq" "math()" ew
\simeq
endsnippet

snippet pr "probability" "math()" ew
\Pr
endsnippet

snippet bb "mathbb" "math()" ew
\mathbb{$1}
endsnippet

snippet rn "R^n" "math()" ew
\mathbb{R}^n
endsnippet

snippet rm "mathrm" "math()" ew
\mathrm{$1}
endsnippet

snippet sr "squared" "math()" Aie
^2
endsnippet

snippet cb "cubed" "math()" Aie
^3
endsnippet

snippet inv "inverse" "math()" ie
^{-1}
endsnippet

snippet AA "forall" "math()" Ae
\forall
endsnippet

snippet "(?<!!)\bEE" "exists" "math()" Aer
\exists
endsnippet

snippet !EE "not exists" "math()" Ae
\nexists
endsnippet

snippet "(?<!(\\|!))\bin" "in" "math()" Aer
\in
endsnippet

snippet !in "in" "math()" Aew
\notin
endsnippet

snippet cc "subset" "math()" ew
\subset
endsnippet

snippet cc= "subseteq" "math()" ew
\subseteq
endsnippet

snippet CC "supset" "math()" ew
\supset
endsnippet

snippet CC= "supseteq" "math()" ew
\supseteq
endsnippet

snippet uu "cup" "math()" ew
\cup
endsnippet

snippet vv "cap" "math()" ew
\cap
endsnippet

snippet UU "bigcup" "math()" ew
\bigcup
endsnippet

snippet VV "bigcap" "math()" ew
\bigcap
endsnippet

snippet "(nab|gr(ad)?)" "nabla" "math()" ewr
\nabla
endsnippet

snippet 0set "varnothing" "math()" ew
\varnothing
endsnippet

snippet set "set" "math()" ew
\\{ $1 \\}
endsnippet

snippet "(?<!(\\|!))\bmid" "mid" "math()" Aer
\mid
endsnippet

snippet !mid "not mid" "math()" Aew
\nmid
endsnippet

snippet compl "complement" "math()" ei
^{c}
endsnippet

snippet td "superscript" "math()" Aei
^{$1}$0
endsnippet

snippet sd "superscript" "math()" Aei
_{$1}$0
endsnippet

snippet '([A-Za-z])(\d)' "auto subscript" "math()" Aewr
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript" "math()" Aewr
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet -> "to" "math()" Aei
\to
endsnippet

snippet !> "mapsto" "math()" Aei
\mapsto
endsnippet

snippet circ "circ" "math()" ew
\circ
endsnippet

snippet ** "cdot" "math()" Aew
\cdot
endsnippet

snippet xx "times" "math()" ew
\times
endsnippet

snippet o+ "oplus" "math()" Aew
\oplus
endsnippet

snippet ox "oplus" "math()" Aew
\otimes
endsnippet

snippet re "Re" "math()" ew
\re
endsnippet

snippet im "Im" "math()" ew
\im
endsnippet

snippet dom "Dom" "math()" ew
\dom
endsnippet

snippet lim "limit" "math()" ew
\lim_{$1 \to $2} $0
endsnippet

snippet @@ "infinity" "math()" Aew
\infty
endsnippet

snippet sum "sum" "math()" ew
\sum_{$1}^{$2} $0
endsnippet

snippet prod "prod" "math()" ew
\prod_{$1}^{$2} $0
endsnippet

snippet \int "int" "math()" ew
\int_{$1}^{$2} $0 \,\mathrm{d}x
endsnippet

snippet "(?<!(\\|!))\b(exp|cos|sin|tan|cot|max|min|sup|inf|argmin|argmax|mod|div|ker|Im|Re|var|cov)" "math command" "math()" Aer
\\`!p snip.rv = match.group(2)`
endsnippet

snippet amod "pmod" "math()" ew
\pmod{$1}
endsnippet

snippet tr "transpose" "math()" ei
^{\scriptscriptstyle\mathrm{T}}
endsnippet

snippet bin "binomial" "math()" ew
\binom{$1}{$2}
endsnippet

post_jump "expand_row(snip, create_row_tabstops(int(match.group(1))))"
snippet "(\d+)r" "dynamic row" br
$0
endsnippet

post_jump "expand_matrix(snip, int(match.group(1)), int(match.group(2)))"
snippet "(\d+),(\d+)([pbBvV]?)" "dynamic matrix" br
\begin{`!p snip.rv = match.group(3)`matrix}
	$0
\end{`!p snip.rv = match.group(3)`matrix}
endsnippet

